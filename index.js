require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const axios = require('axios');
const express = require('express');
const cors = require('cors');
const path = require('path');
const { 
  getAllDrivers,
  getLastRaceResults, 
  getSeasonCalendar, 
  getCurrentDriverStandings,
  getCurrentConstructorStandings,
  getAllTeams,
  getTeamInfo,
  getTeamDrivers,
  getAllCircuits,
  getNextRace,
  getLastRace,
  getDriverInfo,
  formatRaceTime,
  formatDate,
  getPositionEmoji 
} = require('./utils/raceUtils');
const { getRandomDriverFact } = require('./data/driverFacts');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.error('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    message: 'F1 Bot is running! üèÅ',
    timestamp: new Date().toISOString()
  });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { 
  polling: true,
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
  request: {
    timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    retry: 3 // 3 –ø–æ–ø—ã—Ç–∫–∏
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const userPreferences = new Map();

// Ergast API
const F1_API = process.env.F1_API_URL || 'https://f1api.dev/api';

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
const EMOJIS = {
  flag: 'üèÅ',
  trophy: 'üèÜ',
  car: 'üèéÔ∏è',
  heart: '‚ù§Ô∏è',
  fire: 'üî•',
  clock: '‚è∞',
  calendar: 'üìÖ',
  star: '‚≠ê',
  check: '‚úÖ',
  warning: '‚ö†Ô∏è',
  party: 'üéâ',
  crown: 'üëë',
  lightning: '‚ö°',
  rocket: 'üöÄ',
  info: '‚ÑπÔ∏è'
};

// API Routes –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.get('/api/next-race', async (req, res) => {
  try {
    const nextRace = await getNextRace();
    res.json(nextRace);
  } catch (error) {
    console.error('API Error - next-race:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–∏–∂–∞–π—à–µ–π –≥–æ–Ω–∫–µ' });
  }
});

app.get('/api/last-race', async (req, res) => {
  try {
    const lastRace = await getLastRace();
    res.json(lastRace);
  } catch (error) {
    console.error('API Error - last-race:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–µ' });
  }
});

app.get('/api/last-race-results', async (req, res) => {
  try {
    const results = await getLastRaceResults();
    res.json(results);
  } catch (error) {
    console.error('API Error - last-race-results:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–∏' });
  }
});

app.get('/api/calendar', async (req, res) => {
  try {
    const calendar = await getSeasonCalendar();
    res.json(calendar);
  } catch (error) {
    console.error('API Error - calendar:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–µ–∑–æ–Ω–∞' });
  }
});

app.get('/api/drivers', async (req, res) => {
  try {
    const drivers = await getAllDrivers();
    res.json(drivers);
  } catch (error) {
    console.error('API Error - drivers:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∏–ª–æ—Ç–æ–≤' });
  }
});

app.get('/api/driver/:id', async (req, res) => {
  try {
    const driver = await getDriverInfo(req.params.id);
    if (!driver) {
      return res.status(404).json({ error: '–ü–∏–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(driver);
  } catch (error) {
    console.error('API Error - driver:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–ª–æ—Ç–µ' });
  }
});

app.get('/api/teams', async (req, res) => {
  try {
    const teams = await getAllTeams();
    res.json(teams);
  } catch (error) {
    console.error('API Error - teams:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥' });
  }
});

app.get('/api/team/:id', async (req, res) => {
  try {
    const team = await getTeamInfo(req.params.id);
    if (!team) {
      return res.status(404).json({ error: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json(team);
  } catch (error) {
    console.error('API Error - team:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ' });
  }
});

app.get('/api/team/:id/drivers', async (req, res) => {
  try {
    const drivers = await getTeamDrivers(req.params.id);
    res.json(drivers);
  } catch (error) {
    console.error('API Error - team drivers:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏–ª–æ—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã' });
  }
});

app.get('/api/standings/drivers', async (req, res) => {
  try {
    const standings = await getCurrentDriverStandings();
    res.json(standings);
  } catch (error) {
    console.error('API Error - driver standings:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞ –ø–∏–ª–æ—Ç–æ–≤' });
  }
});

app.get('/api/standings/constructors', async (req, res) => {
  try {
    const standings = await getCurrentConstructorStandings();
    res.json(standings);
  } catch (error) {
    console.error('API Error - constructor standings:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—á—ë—Ç–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤' });
  }
});

app.get('/api/circuits', async (req, res) => {
  try {
    const circuits = await getAllCircuits();
    res.json(circuits);
  } catch (error) {
    console.error('API Error - circuits:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞—Å—Å' });
  }
});

app.get('/api/circuit/:id', async (req, res) => {
  try {
    const circuit = await getAllCircuits();
    const foundCircuit = circuit.find(c => c.id === req.params.id);
    if (!foundCircuit) {
      return res.status(404).json({ error: '–¢—Ä–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    res.json(foundCircuit);
  } catch (error) {
    console.error('API Error - circuit:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞—Å—Å–µ' });
  }
});

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const welcomeMessage = `
${EMOJIS.car} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ F1 Bot! ${EMOJIS.car}

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –§–æ—Ä–º—É–ª–µ-1! 

${EMOJIS.flag} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /nextrace - –ë–ª–∏–∂–∞–π—à–∞—è –≥–æ–Ω–∫–∞
‚Ä¢ /lastrace - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–∏
‚Ä¢ /standings - –ü–æ–∑–∏—Ü–∏–∏ –ø–∏–ª–æ—Ç–æ–≤
‚Ä¢ /constructors - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏–π –∑–∞—á—ë—Ç
‚Ä¢ /drivers - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∏–ª–æ—Ç–æ–≤
‚Ä¢ /driver [–∏–º—è] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–ª–æ—Ç–µ
‚Ä¢ /teams - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö
‚Ä¢ /team [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
‚Ä¢ /calendar - –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–µ–∑–æ–Ω–∞
‚Ä¢ /subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ /subscription - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ /favorite [–∏–º—è] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –ø–∏–ª–æ—Ç–∞
‚Ä¢ /webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

${EMOJIS.heart} –ö—Ç–æ —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –ø–∏–ª–æ—Ç? –ù–∞–ø–∏—à–∏ –º–Ω–µ –µ–≥–æ –∏–º—è!
  `;
  
  await bot.sendMessage(chatId, welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
bot.onText(/\/webapp/, async (msg) => {
  const chatId = msg.chat.id;
  const webAppUrl = process.env.WEBAPP_URL || `https://${process.env.RAILWAY_STATIC_URL || 'localhost:3000'}`;
  
  const webAppMessage = `
${EMOJIS.rocket} –û—Ç–∫—Ä—ã—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å F1 Bot!

${EMOJIS.info} –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å:
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≥–æ–Ω–æ–∫
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏–ª–æ—Ç–∞—Ö –∏ –∫–æ–º–∞–Ω–¥–∞—Ö
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞—á—ë—Ç–∞–º–∏
‚Ä¢ –ü–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
‚Ä¢ –¢–µ–º–Ω–æ–π –∏ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–æ–π
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
  `;
  
  await bot.sendMessage(chatId, webAppMessage, {
    reply_markup: {
      inline_keyboard: [[
        {
          text: `${EMOJIS.car} –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å`,
          web_app: { url: webAppUrl }
        }
      ]]
    }
  });
});

// –ë–ª–∏–∂–∞–π—à–∞—è –≥–æ–Ω–∫–∞
bot.onText(/\/nextrace/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const nextRace = await getNextRace();
    
    if (!nextRace) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±–ª–∏–∂–∞–π—à–µ–π –≥–æ–Ω–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–∑–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.`);
      return;
    }
    
    const raceMessage = `
${EMOJIS.flag} –ë–õ–ò–ñ–ê–ô–®–ê–Ø –ì–û–ù–ö–ê ${EMOJIS.flag}

${EMOJIS.calendar} –ì—Ä–∞–Ω-–ø—Ä–∏: ${nextRace.raceName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${EMOJIS.car} –¢—Ä–∞—Å—Å–∞: ${nextRace.circuit?.circuitName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${EMOJIS.calendar} –î–∞—Ç–∞: ${nextRace.schedule?.race?.date ? formatDate(nextRace.schedule.race.date) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${EMOJIS.clock} –í—Ä–µ–º—è: ${nextRace.schedule?.race?.time ? formatRaceTime(nextRace.schedule.race.time) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

${EMOJIS.rocket} –ì–æ—Ç–æ–≤ –∫ –≥–æ–Ω–∫–µ? ${EMOJIS.rocket}
    `;
    
    await bot.sendMessage(chatId, raceMessage);
  } catch (error) {
    console.error('Error fetching race data:', error.message);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ–Ω–∫–µ.`);
  }
});

// –ü–æ–∑–∏—Ü–∏–∏ –ø–∏–ª–æ—Ç–æ–≤
bot.onText(/\/standings/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const standings = await getCurrentDriverStandings();
    
    if (!standings || !standings.standings) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∞–±–ª–∏—Ü–µ –ø–∏–ª–æ—Ç–æ–≤.`);
      return;
    }
    
    let standingsMessage = `${EMOJIS.trophy} –¢–ê–ë–õ–ò–¶–ê –ü–ò–õ–û–¢–û–í ${EMOJIS.trophy}\n\n`;
    
    standings.standings.slice(0, 10).forEach((driver, index) => {
      const position = index + 1;
      const emoji = position === 1 ? EMOJIS.crown : position <= 3 ? EMOJIS.trophy : EMOJIS.car;
      
      standingsMessage += `${emoji} ${position}. ${driver.driver.name} ${driver.driver.surname}\n`;
      standingsMessage += `   ${driver.team.name} - ${driver.points} –æ—á–∫–æ–≤\n\n`;
    });
    
    await bot.sendMessage(chatId, standingsMessage);
  } catch (error) {
    console.error('Error fetching driver standings:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–∏–ª–æ—Ç–æ–≤.`);
  }
});

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–∏–π –∑–∞—á—ë—Ç
bot.onText(/\/constructors/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const standings = await getCurrentConstructorStandings();
    
    if (!standings || !standings.standings) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–º –∑–∞—á—ë—Ç–µ.`);
      return;
    }
    
    let standingsMessage = `${EMOJIS.trophy} –ö–û–ù–°–¢–†–£–ö–¢–û–†–°–ö–ò–ô –ó–ê–ß–Å–¢ ${EMOJIS.trophy}\n\n`;
    
    standings.standings.slice(0, 10).forEach((team, index) => {
      const position = index + 1;
      const emoji = position === 1 ? EMOJIS.crown : position <= 3 ? EMOJIS.trophy : EMOJIS.car;
      
      standingsMessage += `${emoji} ${position}. ${team.team.name}\n`;
      standingsMessage += `   ${team.points} –æ—á–∫–æ–≤\n\n`;
    });
    
    await bot.sendMessage(chatId, standingsMessage);
  } catch (error) {
    console.error('Error fetching constructor standings:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—Å–∫–æ–≥–æ –∑–∞—á—ë—Ç–∞.`);
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–ª–æ—Ç–∞—Ö
bot.onText(/\/drivers/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const drivers = await getAllDrivers();
    
    if (!drivers || drivers.length === 0) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏–ª–æ—Ç–∞—Ö.`);
      return;
    }
    
    let driversMessage = `${EMOJIS.car} –ü–ò–õ–û–¢–´ F1 ${EMOJIS.car}\n\n`;
    
    drivers.slice(0, 20).forEach((driver, index) => {
      driversMessage += `${index + 1}. ${driver.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ${driver.surname || ''}\n`;
      driversMessage += `   –ö–æ–¥: ${driver.shortName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      driversMessage += `   –ù–æ–º–µ—Ä: ${driver.number || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      driversMessage += `   –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${driver.nationality || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
    });
    
    if (drivers.length > 20) {
      driversMessage += `${EMOJIS.info} –ü–æ–∫–∞–∑–∞–Ω–æ ${20} –∏–∑ ${drivers.length} –ø–∏–ª–æ—Ç–æ–≤\n`;
      driversMessage += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /driver [–∏–º—è] –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏–ª–æ—Ç–∞`;
    }
    
    await bot.sendMessage(chatId, driversMessage);
  } catch (error) {
    console.error('Error fetching drivers:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–ª–æ—Ç–∞—Ö.`);
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö
bot.onText(/\/teams/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const teams = await getAllTeams();
    
    if (!teams || teams.length === 0) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö.`);
      return;
    }
    
    let teamsMessage = `${EMOJIS.car} –ö–û–ú–ê–ù–î–´ F1 ${EMOJIS.car}\n\n`;
    
    teams.slice(0, 20).forEach((team, index) => {
      teamsMessage += `${index + 1}. ${team.teamName || team.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      teamsMessage += `   –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${team.country || team.nationality || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      if (team.base) teamsMessage += `   –ë–∞–∑–∞: ${team.base}\n`;
      if (team.teamChief) teamsMessage += `   –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${team.teamChief}\n`;
      teamsMessage += `\n`;
    });
    
    if (teams.length > 20) {
      teamsMessage += `${EMOJIS.info} –ü–æ–∫–∞–∑–∞–Ω–æ ${20} –∏–∑ ${teams.length} –∫–æ–º–∞–Ω–¥\n`;
      teamsMessage += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /team [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã`;
    }
    
    await bot.sendMessage(chatId, teamsMessage);
  } catch (error) {
    console.error('Error fetching teams:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–∞—Ö.`);
  }
});

// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
bot.onText(/\/subscribe/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!userPreferences.has(userId)) {
    userPreferences.set(userId, { subscribed: false, favoriteDriver: null });
  }
  
  const user = userPreferences.get(userId);
  user.subscribed = !user.subscribed;
  
  const message = user.subscribed 
    ? `${EMOJIS.check} –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≥–æ–Ω–∫–∞—Ö! ${EMOJIS.heart}`
    : `${EMOJIS.warning} –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.`;
    
  await bot.sendMessage(chatId, message);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
bot.onText(/\/subscription/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (!userPreferences.has(userId)) {
    userPreferences.set(userId, { subscribed: false, favoriteDriver: null });
  }
  
  const user = userPreferences.get(userId);
  
  let statusMessage = `${EMOJIS.info} –°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–ö–ò ${EMOJIS.info}\n\n`;
  statusMessage += `–ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscribed ? `${EMOJIS.check} –ê–∫—Ç–∏–≤–Ω–∞` : `${EMOJIS.warning} –ù–µ–∞–∫—Ç–∏–≤–Ω–∞`}\n`;
  statusMessage += `–õ—é–±–∏–º—ã–π –ø–∏–ª–æ—Ç: ${user.favoriteDriver || '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n\n`;
  statusMessage += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏`;
  
  await bot.sendMessage(chatId, statusMessage);
});



// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é–±–∏–º–æ–≥–æ –ø–∏–ª–æ—Ç–∞
bot.onText(/\/favorite (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const driverName = match[1];
  
  if (!userPreferences.has(userId)) {
    userPreferences.set(userId, { subscribed: false, favoriteDriver: null });
  }
  
  const user = userPreferences.get(userId);
  user.favoriteDriver = driverName;
  
  const message = `${EMOJIS.heart} ${driverName} —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –ø–∏–ª–æ—Ç! ${EMOJIS.heart}\n\n–ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏! ${EMOJIS.fire}`;
  
  await bot.sendMessage(chatId, message);
});

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–∏
bot.onText(/\/lastrace/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const lastRace = await getLastRace();
    const lastRaceResults = await getLastRaceResults();
    
    if (!lastRace) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–æ–Ω–∫–µ.`);
      return;
    }
    
    let resultsMessage = `${EMOJIS.flag} –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï–î–ù–ï–ô –ì–û–ù–ö–ò ${EMOJIS.flag}\n\n`;
    resultsMessage += `${EMOJIS.calendar} ${lastRace.raceName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    resultsMessage += `${EMOJIS.car} ${lastRace.circuit?.circuitName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    resultsMessage += `${EMOJIS.calendar} ${lastRace.schedule?.race?.date ? formatDate(lastRace.schedule.race.date) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö –≥–æ–Ω–∫–∏
    if (lastRace.winner) {
      resultsMessage += `${EMOJIS.trophy} –ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n\n`;
      resultsMessage += `${EMOJIS.crown} ü•á ${lastRace.winner.name} ${lastRace.winner.surname}\n`;
      resultsMessage += `   ${lastRace.teamWinner?.teamName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} - 25 –æ—á–∫–æ–≤\n\n`;
      
      if (lastRace.fast_lap && lastRace.fast_lap.fast_lap) {
        resultsMessage += `${EMOJIS.lightning} –ë–´–°–¢–†–´–ô –ö–†–£–ì: ${lastRace.fast_lap.fast_lap}\n`;
      }
    } else if (lastRaceResults && lastRaceResults.results) {
      resultsMessage += `${EMOJIS.trophy} –¢–û–ü-10:\n\n`;
      
      lastRaceResults.results.slice(0, 10).forEach((result, index) => {
        const position = index + 1;
        const emoji = getPositionEmoji(position);
        
        resultsMessage += `${emoji} ${position}. ${result.driver.name} ${result.driver.surname}\n`;
        resultsMessage += `   ${result.team.name} - ${result.points || 0} –æ—á–∫–æ–≤\n\n`;
      });
    } else {
      resultsMessage += `${EMOJIS.warning} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–Ω–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n`;
    }
    
    await bot.sendMessage(chatId, resultsMessage);
  } catch (error) {
    console.error('Error fetching last race results:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ–Ω–∫–∏.`);
  }
});

// –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–µ–∑–æ–Ω–∞
bot.onText(/\/calendar/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const calendar = await getSeasonCalendar();
    
    if (!calendar || !calendar.races) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —Å–µ–∑–æ–Ω–∞.`);
      return;
    }
    
    const now = new Date();
    const upcomingRaces = calendar.races.filter(race => new Date(race.schedule?.race?.date) > now);
    const completedRaces = calendar.races.filter(race => new Date(race.schedule?.race?.date) <= now);
    
    let calendarMessage = `${EMOJIS.calendar} –ö–ê–õ–ï–ù–î–ê–†–¨ –°–ï–ó–û–ù–ê ${EMOJIS.calendar}\n\n`;
    calendarMessage += `${EMOJIS.check} –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≥–æ–Ω–æ–∫: ${completedRaces.length}\n`;
    calendarMessage += `${EMOJIS.clock} –û—Å—Ç–∞–ª–æ—Å—å –≥–æ–Ω–æ–∫: ${upcomingRaces.length}\n`;
    calendarMessage += `${EMOJIS.trophy} –í—Å–µ–≥–æ –≤ —Å–µ–∑–æ–Ω–µ: ${calendar.races.length}\n\n`;
    
    if (upcomingRaces.length > 0) {
      calendarMessage += `${EMOJIS.flag} –°–õ–ï–î–£–Æ–©–ò–ï –ì–û–ù–ö–ò:\n\n`;
      upcomingRaces.slice(0, 5).forEach((race, index) => {
        calendarMessage += `${index + 1}. ${race.raceName}\n`;
        calendarMessage += `   ${race.circuit?.circuitName}\n`;
        calendarMessage += `   ${formatDate(race.schedule?.race?.date)}\n\n`;
      });
    }
    
    await bot.sendMessage(chatId, calendarMessage);
  } catch (error) {
    console.error('Error fetching season calendar:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å–µ–∑–æ–Ω–∞.`);
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏–ª–æ—Ç–µ
bot.onText(/\/driver (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const driverName = match[1];
  
  try {
    const driverInfo = await getDriverInfo(driverName);
    
    if (!driverInfo) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ü–∏–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.`);
      return;
    }
    
    let driverMessage = `${EMOJIS.car} –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–ò–õ–û–¢–ï ${EMOJIS.car}\n\n`;
    driverMessage += `${EMOJIS.star} ${driverInfo.driver.name} ${driverInfo.driver.surname}\n`;
    driverMessage += `${EMOJIS.car} –ö–æ–¥: ${driverInfo.driver.shortName}\n`;
    driverMessage += `${EMOJIS.car} –ù–æ–º–µ—Ä: ${driverInfo.driver.number}\n`;
    driverMessage += `${EMOJIS.flag} –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${driverInfo.driver.nationality}\n`;
    driverMessage += `${EMOJIS.calendar} –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${driverInfo.driver.birthday}\n`;
    
    if (driverInfo.driver.url) {
      driverMessage += `${EMOJIS.info} –í–∏–∫–∏–ø–µ–¥–∏—è: ${driverInfo.driver.url}\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç
    const fact = getRandomDriverFact(driverName);
    driverMessage += `\n${EMOJIS.heart} ${fact}`;
    
    await bot.sendMessage(chatId, driverMessage);
  } catch (error) {
    console.error('Error fetching driver info:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–ª–æ—Ç–µ.`);
  }
});

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–µ
bot.onText(/\/team (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const teamName = match[1];
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    const teams = await getAllTeams();
    const team = teams.find(t => 
      t.name.toLowerCase().includes(teamName.toLowerCase()) ||
      t.nationality.toLowerCase().includes(teamName.toLowerCase())
    );
    
    if (!team) {
      await bot.sendMessage(chatId, `${EMOJIS.warning} –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.`);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    const teamInfo = await getTeamInfo(team.id);
    const teamDrivers = await getTeamDrivers(team.id);
    
    let teamMessage = `${EMOJIS.car} –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ê–ù–î–ï ${EMOJIS.car}\n\n`;
    teamMessage += `${EMOJIS.star} ${team.name}\n`;
    teamMessage += `${EMOJIS.flag} –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${team.nationality}\n`;
    
    if (team.base) teamMessage += `${EMOJIS.car} –ë–∞–∑–∞: ${team.base}\n`;
    if (team.teamChief) teamMessage += `${EMOJIS.star} –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: ${team.teamChief}\n`;
    
    if (teamDrivers && teamDrivers.drivers) {
      teamMessage += `\n${EMOJIS.car} –ü–ò–õ–û–¢–´ –ö–û–ú–ê–ù–î–´:\n`;
      teamDrivers.drivers.forEach(driver => {
        teamMessage += `‚Ä¢ ${driver.name} ${driver.surname} (${driver.shortName})\n`;
      });
    }
    
    await bot.sendMessage(chatId, teamMessage);
  } catch (error) {
    console.error('Error fetching team info:', error);
    await bot.sendMessage(chatId, `${EMOJIS.warning} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ.`);
  }
});

// –í–µ—Å—ë–ª—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/verstappen/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('verstappen');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/hamilton/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('hamilton');
  await bot.sendMessage(chatId, fact);
});

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∏–ª–æ—Ç–æ–≤
bot.onText(/\/leclerc/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('leclerc');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/norris/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('norris');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/russell/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('russell');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/sainz/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('sainz');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/perez/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('perez');
  await bot.sendMessage(chatId, fact);
});

bot.onText(/\/alonso/, async (msg) => {
  const chatId = msg.chat.id;
  const fact = getRandomDriverFact('alonso');
  await bot.sendMessage(chatId, fact);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏–ª–æ—Ç–æ–≤
bot.on('message', async (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const driverName = msg.text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ª—é–±–∏–º–æ–≥–æ –ø–∏–ª–æ—Ç–∞
    if (!userPreferences.has(userId)) {
      userPreferences.set(userId, { subscribed: false, favoriteDriver: null });
    }
    
    const user = userPreferences.get(userId);
    user.favoriteDriver = msg.text;
    
    const message = `${EMOJIS.heart} –û—Ç–ª–∏—á–Ω–æ! ${msg.text} —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–π –ª—é–±–∏–º—ã–π –ø–∏–ª–æ—Ç! ${EMOJIS.heart}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /favorite [–∏–º—è] —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª—é–±–∏–º–æ–≥–æ –ø–∏–ª–æ—Ç–∞.`;
    
    await bot.sendMessage(chatId, message);
  }
});



// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00)
cron.schedule('0 9 * * *', async () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ–Ω–∫–∞ —Å–µ–≥–æ–¥–Ω—è
  try {
    const today = new Date().toISOString().split('T')[0];
    const response = await axios.get(`${F1_API}/current`);
    const races = response.data.races;
    
    const todayRace = races.find(race => race.schedule?.race?.date === today);
    
    if (todayRace) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      for (const [userId, user] of userPreferences) {
        if (user.subscribed) {
          const message = `
${EMOJIS.flag} –°–ï–ì–û–î–ù–Ø –ì–û–ù–ö–ê! ${EMOJIS.flag}

${EMOJIS.calendar} ${todayRace.raceName}
${EMOJIS.car} ${todayRace.circuit?.circuitName}
${EMOJIS.clock} –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ${todayRace.schedule?.race?.time ? formatRaceTime(todayRace.schedule.race.time) : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

${EMOJIS.heart} –ì–æ—Ç–æ–≤ –∫ –≥–æ–Ω–∫–µ? ${EMOJIS.heart}
          `;
          
          try {
            await bot.sendMessage(userId, message);
          } catch (error) {
            console.error(`Error sending notification to ${userId}:`, error);
          }
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
  }
});



// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
  console.error('Polling error:', error.message);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 409 Conflict (–Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞)
  if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
    console.error('üö® –û–®–ò–ë–ö–ê 409: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞!');
    console.error('üí° –†–µ—à–µ–Ω–∏–µ: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.');
    console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.error('   - –ù–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ node index.js');
    console.error('   - –ù–µ—Ç –ª–∏ –¥—Ä—É–≥–∏—Ö –¥–µ–ø–ª–æ–µ–≤ –Ω–∞ Railway/Render');
    console.error('   - –û—á–∏—Å—Ç–∏—Ç–µ webhook –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ');
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...');
      process.exit(1);
    }, 30000);
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
  if (error.code === 'ESOCKETTIMEDOUT' || error.message.includes('ECONNABORTED')) {
    console.error('‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...');
    setTimeout(() => {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
      process.exit(1);
    }, 10000);
  }
});

bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error.message);
});

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
});

console.log('F1 Bot –∑–∞–ø—É—â–µ–Ω! üèÅ'); 